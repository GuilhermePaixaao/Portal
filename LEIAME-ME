PARA RODAR DIGITE NO TERMINAL
 1 - Suba o banco de dados: docs/banco.sql
 2 - [no terminal] npm install
 2 - [no terminal] node app.json    
 
PORTA: 8080

RODAR:
node app.js
ou 
npx nodemon app.js
 


ROTAS DE CARGOS:
 GET    => /api/v1/cargos/
 GET    => /api/v1/cargos/:idFuncionario
 POST   => /api/v1/cargos/
 PUT    => /api/v1/cargos/:idFuncionario
 DELETE => /api/v1/cargos/:idFuncionario


 ROTAS DE FUNCIONARIOS:
 GET    => /api/v1/funcionarios/
 GET    => /api/v1/funcionarios/:idFuncionario
 POST   => /api/v1/funcionarios/
 PUT    => /api/v1/funcionarios/:idFuncionario
 DELETE => /api/v1/funcionarios/:idFuncionario


 ESTRUTURA DE ARQUIVOS
 
 restpApiJsVideoAula-main/
│
├── app.js
├── package.json
├── LEIAME-ME
│
├── http/
│   ├── MeuTokenJWT.js
│   └── ErrorResponse.js
│
├── controllers/
│   ├── CargoController.js
│   └── FuncionarioController.js
│
├── services/
│   ├── CargoService.js
│   └── FuncionarioService.js
│
├── dao/
│   ├── CargoDAO.js
│   └── FuncionarioDAO.js
│
├── middlewares/
│   ├── JwtMiddleware.js
│   ├── CargoMiddleware.js
│   └── FuncionarioMiddleware.js
│
├── models/
│   ├── Cargo.js
│   └── Funcionario.js
│
├── routes/
│   ├── CargoRouter.js
│   └── FuncionarioRouter.js
│
├── utils/
│   └── (funções utilitárias, helpers, etc.)
│
└── database/
    └── (scripts de banco de dados, conexões, etc.)


controllers/
Contém os arquivos responsáveis por receber as requisições HTTP, chamar os serviços necessários e retornar as respostas. Os controllers não devem conter regras de negócio complexas, apenas orquestrar o fluxo entre services, models e DAOs.

services/
Centraliza as regras de negócio e o processamento dos dados. Os services recebem dados dos controllers, processam, validam, aplicam regras e, se necessário, interagem com os DAOs para acessar o banco de dados.

dao/
(Data Access Object) Responsável por toda a comunicação com o banco de dados. Aqui ficam as funções de CRUD (Create, Read, Update, Delete) e consultas específicas.

middlewares/
Contém funções intermediárias que são executadas entre a requisição e a resposta, como autenticação, validação de dados, tratamento de erros, etc.

models/
Define as estruturas das entidades do sistema (por exemplo, Cargo, Funcionario). Os models representam os dados e podem conter métodos auxiliares relacionados à entidade.

routes/
Define as rotas/endpoints da aplicação, associando URLs aos controllers e middlewares necessários.

utils/
Armazena funções utilitárias e helpers que podem ser usadas em várias partes do projeto, como formatação de datas, geração de tokens, etc.

database/
Guarda scripts de criação de tabelas, arquivos de configuração de conexão e outros recursos relacionados ao banco de dados.

http/
Responsável por manipulação de dados http e validação jwt