const ErrorResponse = require("../utils/ErrorResponse");

/**
 * Middleware para valida√ß√£o de requisi√ß√µes relacionadas √† entidade Funcionario.
 * 
 * Objetivo:
 * - Garantir que os dados obrigat√≥rios estejam presentes antes de chamar
 *   os m√©todos do Controller ou Service.
 * - Lan√ßar erros padronizados usando ErrorResponse quando a valida√ß√£o falhar.
 */
module.exports = class FuncionarioMiddleware {

    /**
     * Valida o corpo da requisi√ß√£o para cria√ß√£o de um novo funcion√°rio.
     * 
     * Verifica:
     * - Se o objeto 'funcionario' existe
     * - Campos obrigat√≥rios: nomeFuncionario, email, senha, recebeValeTransporte
     * - Tipo e valor de recebeValeTransporte (0 ou 1)
     * - Objeto 'cargo' presente e v√°lido
     * - idCargo √© um inteiro positivo
     * 
     * @param {Request} request - Objeto de requisi√ß√£o do Express
     * @param {Response} response - Objeto de resposta do Express
     * @param {Function} next - Fun√ß√£o next() para passar para o pr√≥ximo middleware
     * 
     * Lan√ßa ErrorResponse com c√≥digo HTTP 400 em caso de valida√ß√£o falha.
     */
    validateCreateBody = (request, response, next) => {
        console.log("üî∑ FuncionarioMiddleware.validateCreateBody()");
        const body = request.body;

        if (!body.funcionario) {
            throw new ErrorResponse(400, "Erro na valida√ß√£o de dados", { message: "O campo 'funcionario' √© obrigat√≥rio!" });
        }

        const funcionario = body.funcionario;

        const camposObrigatorios = ["nomeFuncionario", "email", "senha", "recebeValeTransporte"];
        for (const campo of camposObrigatorios) {
            if (funcionario[campo] === undefined || funcionario[campo] === null || funcionario[campo] === "") {
                throw new ErrorResponse(400, "Erro na valida√ß√£o de dados", { message: `O campo '${campo}' √© obrigat√≥rio!` });
            }
        }

        if (![0, 1].includes(funcionario.recebeValeTransporte)) {
            throw new ErrorResponse(400, "Erro na valida√ß√£o de dados", { message: "O campo 'recebeValeTransporte' deve ser 0 ou 1" });
        }

        if (!funcionario.cargo || typeof funcionario.cargo !== "object") {
            throw new ErrorResponse(400, "Erro na valida√ß√£o de dados", { message: "O campo 'cargo' √© obrigat√≥rio e deve ser um objeto" });
        }

        if (!Number.isInteger(funcionario.cargo.idCargo) || funcionario.cargo.idCargo <= 0) {
            throw new ErrorResponse(400, "Erro na valida√ß√£o de dados", { message: "O campo 'idCargo' deve ser um n√∫mero inteiro positivo" });
        }

        next();
    }

    /**
     * Valida o corpo da requisi√ß√£o para login de um funcion√°rio.
     * 
     * Verifica:
     * - Se o objeto 'funcionario' existe
     * - Campos obrigat√≥rios: email, senha
     * - Formato b√°sico de email
     * 
     * @param {Request} request - Objeto de requisi√ß√£o do Express
     * @param {Response} response - Objeto de resposta do Express
     * @param {Function} next - Fun√ß√£o next() para passar para o pr√≥ximo middleware
     * 
     * Lan√ßa ErrorResponse com c√≥digo HTTP 400 em caso de valida√ß√£o falha.
     */
    validateLoginBody = (request, response, next) => {
        console.log("üî∑ FuncionarioMiddleware.validateLoginBody()");
        const body = request.body;

        if (!body.funcionario) {
            throw new ErrorResponse(400, "Erro na valida√ß√£o de dados", { message: "O campo 'funcionario' √© obrigat√≥rio!" });
        }

        const funcionario = body.funcionario;

        const camposObrigatorios = ["email", "senha"];
        for (const campo of camposObrigatorios) {
            if (!funcionario[campo] || funcionario[campo].toString().trim() === "") {
                throw new ErrorResponse(400, "Erro na valida√ß√£o de dados", { message: `O campo '${campo}' √© obrigat√≥rio!` });
            }
        }

        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(funcionario.email)) {
            throw new ErrorResponse(400, "Erro na valida√ß√£o de dados", { message: "O campo 'email' n√£o √© um e-mail v√°lido" });
        }

        next();
    }

    /**
     * Valida o par√¢metro de rota 'idFuncionario' em requisi√ß√µes que necessitam de identifica√ß√£o do funcion√°rio.
     * 
     * Verifica:
     * - Se o par√¢metro 'idFuncionario' foi passado na URL
     * 
     * @param {Request} request - Objeto de requisi√ß√£o do Express
     * @param {Response} response - Objeto de resposta do Express
     * @param {Function} next - Fun√ß√£o next() para passar para o pr√≥ximo middleware
     * 
     * Lan√ßa ErrorResponse com c√≥digo HTTP 400 caso 'idFuncionario' n√£o seja fornecido.
     */
    validateIdParam = (request, response, next) => {
        console.log("üî∑ FuncionarioMiddleware.validateIdParam()");
        const { idFuncionario } = request.params;

        if (!idFuncionario) {
            throw new ErrorResponse(400, "Erro na valida√ß√£o de dados", { message: "O par√¢metro 'idFuncionario' √© obrigat√≥rio!" });
        }

        next();
    };
}
