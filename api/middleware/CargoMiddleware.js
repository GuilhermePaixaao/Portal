const ErrorResponse = require("../utils/ErrorResponse");
const Cargo = require("../model/Cargo");
const CargoDAO = require("../dao/CargoDAO");

/**
 * Middleware para valida√ß√£o de requisi√ß√µes relacionadas √† entidade Cargo.
 * 
 * Objetivo:
 * - Garantir que os dados obrigat√≥rios estejam presentes antes de chamar
 *   os m√©todos do Controller ou Service.
 * - Lan√ßar erros padronizados usando ErrorResponse quando a valida√ß√£o falhar.
 */
module.exports = class CargoMiddleware {

    /**
     * Valida o corpo da requisi√ß√£o (request.body) para opera√ß√µes de Cargo.
     * 
     * Verifica:
     * - Se o objeto 'cargo' existe
     * - Se o campo obrigat√≥rio 'nomeCargo' est√° presente e n√£o √© vazio
     * 
     * @param {Request} request - Objeto de requisi√ß√£o do Express
     * @param {Response} response - Objeto de resposta do Express
     * @param {Function} next - Fun√ß√£o next() para passar para o pr√≥ximo middleware
     * 
     * Lan√ßa ErrorResponse com c√≥digo HTTP 400 em caso de valida√ß√£o falha.
     */
    validateBody = (request, response, next) => {
        console.log("üî∑ CargoMiddleware.validateBody()");
        const body = request.body;

        if (!body.cargo) {
            throw new ErrorResponse(400, "Erro na valida√ß√£o de dados", { message: "O campo 'cargo' √© obrigat√≥rio!" });
        }

        const cargo = body.cargo;

        if (!cargo.nomeCargo || cargo.nomeCargo.trim() === "") {
            throw new ErrorResponse(400, "Erro na valida√ß√£o de dados", { message: "O campo 'nomeCargo' √© obrigat√≥rio!" });
        }

        next(); // Passa para o pr√≥ximo middleware ou controller
    }

    /**
     * Valida o par√¢metro de rota 'idCargo' em requisi√ß√µes que necessitam de identifica√ß√£o do cargo.
     * 
     * Verifica:
     * - Se o par√¢metro 'idCargo' foi passado na URL
     * 
     * @param {Request} request - Objeto de requisi√ß√£o do Express
     * @param {Response} response - Objeto de resposta do Express
     * @param {Function} next - Fun√ß√£o next() para passar para o pr√≥ximo middleware
     * 
     * Lan√ßa ErrorResponse com c√≥digo HTTP 400 caso 'idCargo' n√£o seja fornecido.
     */
    validateIdParam = (request, response, next) => {
        console.log("üî∑ CargoMiddleware.validateIdParam()");
        const { idCargo } = request.params;

        if (!idCargo) {
            throw new ErrorResponse(400, "Erro na valida√ß√£o de dados", { message: "O par√¢metro 'idCargo' √© obrigat√≥rio!" });
        }

        next(); // Passa para o pr√≥ximo middleware ou controller
    }
}
